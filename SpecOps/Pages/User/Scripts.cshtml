@page "{rpCategoryId?}/{rpScriptId?}"
@model SpecOps.Pages.User.ScriptsModel
@{
    ViewData["Title"] = "Script Runner";
}

@section head {
    <!-- DataTables -->
    <link rel="stylesheet" href="@Url.Content("~/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css")">
    <link rel="stylesheet" href="@Url.Content("~/plugins/datatables-responsive/css/responsive.bootstrap4.min.css")">
    <link rel="stylesheet" href="@Url.Content("~/plugins/datatables-buttons/css/buttons.bootstrap4.min.css")">
    <style>
        /* Log table styles taken from https://windowsterminalthemes.dev/ theme Obsidian */
        :root {
            --log-foreground: #bbbbbb;   /*white*/
            --log-background: #283033;   /*background*/
        }
        .so-data { color: #bbbbbb; }     /*white*/
        .so-error { color: #ff5370; }    /*red*/
        .so-warning { color: #fecd22; }  /*yellow*/
        .so-info { color: #ffffff; }     /*brightWhite*/
        .so-progress { color: #00bb00; } /*green*/
        .so-verbose { color: #3a9bdb; }  /*blue*/
        .so-debug { color: #55ffff; }    /*brightCyan*/
        .so-system { color: #00bbbb; }   /*cyan*/
        .so-unknown { color: #ffcb6b; }  /*yellow*/
        /* ----------------------------------------------------------------------------- */

        .error { border-color: var(--danger);}
        label.error { color: var(--danger); }

        /* Remove the browser's dropdown on input with range datalist because we're using bootstrap's */
        [list]::-webkit-calendar-picker-indicator { display: none; }

        .logTable {
            display: block;
            line-height: initial;
            font-family: var(--font-family-monospace);
            font-size: .9rem;
            color: var(--log-foreground);
            background-color: var(--log-background);
            min-height: 30rem;
            padding: .6rem;
            table-layout: fixed;
        }

        .logTable th { text-align: left; padding: .75rem .75rem .75rem .25rem; font-weight: bold; }

        .logTable col:nth-of-type(1), .logTable td:nth-of-type(1) { width: 190px; white-space: nowrap; }
        .logTable col:nth-of-type(2) { width: 85px; }
        .logTable col:nth-of-type(3) { width: 100vw; }

        .logTable td { border: 0; padding: .1rem .25rem; }
    </style>
}

@section pageHeader {
    <!-- Content Header (Page header) -->
    <div class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1 class="m-0">Script Runner</h1>
                </div><!-- /.col -->
            </div><!-- /.row -->
        </div><!-- /.container-fluid -->
    </div>
    <!-- /.content-header -->
}

<div class="container-fluid">
    <div class="row">
        <!-- left column -->
        <div class="col-md-10">
            <!-- Horizontal Form -->
            <div class="card card-secondary">
                <div class="card-header">
                    <h3 class="card-title">Script Config</h3>
                </div>
                <!-- /.card-header -->
                <form id="dummyForm">
                    <div class="card-body scriptConfig">
                        <div class="form-group row">
                            <label for="CategoryId" class="col-md-2 col-form-label">Category</label>
                            <div class="col-md-6">
                                <select id="CategoryId" name="CategoryId" class="custom-select" asp-items="Model.Categories" required>
                                    <option value="">Select Category</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="ScriptId" class="col-md-2 col-form-label">Script</label>
                            <div class="col-md-6">
                                <select id="ScriptId" name="ScriptId" class="custom-select" required>
                                    <option value="">Select Script</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="scriptSummary" class="col-md-2 col-form-label">Summary</label>
                            <div class="col-md-10">
                                <textarea id="scriptSummary" name="scriptSummary" class="card-text form-control-plaintext" readonly style="resize:none;"></textarea>
                            </div>
                        </div>
                        <div class="card border-light">
                            <div class="card-header font-weight-bold">Parameters</div>
                            <div class="card-body">
                                <div class="card-text parameters"></div>
                            </div>
                        </div>
                    </div>
                    <!-- /.card-body -->
                    <div class="card-footer">
                        <button id="runScript" type="button" class="btn btn-primary">
                            <i class="fas fa-code"></i> Run
                        </button>
                        <button id="cancelScript" type="button" class="btn btn-danger">
                            <i class="fas fa-stop-circle"></i> Cancel
                        </button>
                    </div>
                    <!-- /.card-footer -->
                </form>
            </div>
            <!-- /.card -->
        </div>
        <!-- left column -->
        <div class="col-md-12">
            <!-- Horizontal Form -->
            <div class="card card-secondary">
                <div class="card-body">
                    <table id="log" class="logTable table table-dark table-borderless">
                        <colgroup>
                            <col>
                            <col>
                            <col>
                        </colgroup>
                        <thead><tr><th>TimeStamp</th><th>Type</th><th>Data</th></tr></thead>
                        <tbody></tbody>
                    </table>
                </div>
                <!-- /.card-body -->
            </div>
            <!-- /.card -->
        </div>
    </div>
</div>

@section scripts {

    <!-- SignalR -->
    <script src="@Url.Content("~/lib/signalr/dist/browser/signalr.min.js")"></script>
    <!-- DataTables  & Plugins -->
    <script src="@Url.Content("~/plugins/datatables/jquery.dataTables.min.js")"></script>
    <script src="@Url.Content("~/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js")"></script>
    <script src="@Url.Content("~/plugins/datatables-buttons/js/dataTables.buttons.min.js")"></script>
    <script src="@Url.Content("~/plugins/datatables-buttons/js/buttons.bootstrap4.min.js")"></script>
    <script src="@Url.Content("~/plugins/jszip/jszip.min.js")"></script>
    <script src="@Url.Content("~/plugins/pdfmake/pdfmake.min.js")"></script>
    <script src="@Url.Content("~/plugins/pdfmake/vfs_fonts.js")"></script>
    <script src="@Url.Content("~/plugins/datatables-buttons/js/buttons.html5.min.js")"></script>
    <script src="@Url.Content("~/plugins/datatables-buttons/js/buttons.print.min.js")"></script>
    <!-- jquery-validation -->
    <script src="@Url.Content("~/plugins/jquery-validation/jquery.validate.min.js")"></script>
    <script src="@Url.Content("~/plugins/jquery-validation/additional-methods.min.js")"></script>

    <script>

        (function () {

            // simple helper to check for null/undefined/empty
            function hasValue(x) {
                return !!x;
            }

            // Grab route parameters (if exists) because we'll auto-select them
            var routeCategoryId = "@HttpContext.Request.RouteValues["rpCategoryId"]" ?? "";
            var routeScriptId = "@HttpContext.Request.RouteValues["rpScriptId"]" ?? "";

            // Mapping of output log record type to css class for coloring comes from appsettings
            var dataTypes = @Html.Raw(Model.OutputLevels);

            var connection;

            $(document).ready(function () {

                // if the user presses Enter in a form control, don't submit the form (postback) but rather click the Run button
                $('form').keydown(function (event) {
                    if (event.keyCode == 13) {
                        event.preventDefault();
                        $('#runScript').click();
                        return false;
                    }
                });

                $.fn.dataTable.ext.buttons.clear = {
                    text: 'Clear',
                    action: function (e, dt, node, config) {
                        dt.clear().draw();
                    }
                };

                // setup the output log tabale
                $('#log').DataTable({
                    "buttons": [
                        { extend: 'copy', className: 'btn-sm' },
                        { extend: 'csv', className: 'btn-sm' },
                        { extend: 'excel', className: 'btn-sm' },
                        { extend: 'pdf', className: 'btn-sm' },
                        { extend: 'print', className: 'btn-sm' },
                        { extend: 'clear', className: 'btn-sm' }
                    ],
                    "paging": false,
                    "language": {
                        "emptyTable": "No output yet...  Try running the script."
                    },
                    "lengthChange": false,
                    "searching": true,
                    "ordering": true,
                    "info": false,
                    "autoWidth": false,
                    "responsive": false,
                }).buttons().container().appendTo('#log_wrapper .col-md-6:eq(0)');

                //Disable run button until connection is established; dont show spinner
                toggleRunScript(true, false);

                // dynamically get the hubUrl by including the site's appname if exists, as site could be running from root or as an app.
                // setup the hub connection
                connection = new signalR.HubConnectionBuilder().withUrl("@HttpContext.Request.PathBase.Value" + "/streamPowerShell").build();
 
                // log the output records to the table as they come in
                connection.on("OutputReceived", logRecord => {
                    $('#log').DataTable().row.add([
                        logRecord.timeStamp,
                        logRecord.type,
                        logRecord.data
                    ]).draw(false).nodes().to$().addClass(
                        dataTypes.find((o) => { return o["Name"] === logRecord.type }).CssClass ?? ""
                    );

                    if (logRecord.type == 'System' && logRecord.data == "Script execution ended.") {
                        // script finished, so enable run button and hide spinner
                        toggleRunScript(false, false);
                    }
                });

                // enable the Run button once connected
                connection.start().then(function () {
                    // enable run button; dont show spinner
                    toggleRunScript(false, false);
                }).catch(err => $('#log').DataTable().row.add(["", "Error", `An error occured: ${err}`]).draw(false));

                // if categoryId route parm exists, auto-select it in the dropdown and clear the temp variable
                if (hasValue(routeCategoryId)) {
                    $("#CategoryId").val(routeCategoryId).trigger('change');
                    routeCategoryId = "";
                }

                // setup validation
                $('#dummyForm').validate();

                // this displays the range value in the output element as the slider is moved
                $('#dummyForm').on('input change', 'input[type="range"]', function () {
                    this.nextElementSibling.value = this.value;
                });
            });

            /// disable (boolean)  Disable button
            /// spin (boolean)  Invoke spinner
            function toggleRunScript(disable, spin) {

                var $runScript = $('#runScript');
                $runScript.prop('disabled', disable);

                var $cancelScript = $('#cancelScript');

                var $icon = $runScript.children(":first");
                if (spin) {
                    $icon.addClass("spinner-border spinner-border-sm").removeClass("fas fa-code");
                    $cancelScript.prop('disabled', false);
                }
                else {
                    $icon.removeClass("spinner-border spinner-border-sm").addClass("fas fa-code");
                    $cancelScript.prop('disabled', true);
                }

            }

            $('#cancelScript').on("click", function () {
                $.getJSON(`?handler=CancelScript&connectionId=${connection.connection.connectionId}`);
            });

            // Run the script
            $('#runScript').on("click", function () {

                // if fields are valid, invoke the hub and run the script
                if ($('#dummyForm').valid()) {

                    // disable run button and show spinner
                    toggleRunScript(true, true);

                    let parameters = {};
                    $('div.parameters input').each(function (i) {
                        parameters[this.id] = this.value;
                    });

                    connection
                        .invoke("StreamPowerShell", $('#ScriptId').val(), parameters)
                        .catch(function (err) {
                            $('#log').DataTable().row.add(["", "Error", `An error occured: ${err}`]).draw(false);
                            // enable run button and hide spinner
                            toggleRunScript(false, false);
                        });

                    event.preventDefault();
                }
                else {
                    // scroll to the first error
                    $('html, body').animate({
                        scrollTop: ($('.error:visible').offset().top - 60)
                    }, 500);
                }

            });

            // shared function to clear the script-specific fields
            function clearScriptFields() {
                $('#scriptSummary').val("");
                $('div.parameters').empty();
            }

            // when category changes, clear fields and get list of scripts
            $("#CategoryId").on("change", function () {
                let categoryId = $(this).val();
                $ScriptId = $("#ScriptId");
                $ScriptId.empty().append("<option value=''>Select Script</option>");
                clearScriptFields();
                if (hasValue(categoryId)) {
                    $.getJSON(`?handler=Scripts&categoryId=${categoryId}`, (data) => {
                        $.each(data, function (i, item) {
                            $ScriptId.append(`<option value="${item.id}">${item.name}</option>`);
                        });
                    }).done(function () {
                        // if scriptId route parm exists, auto-select it in the dropdown and clear the temp variable
                        if (hasValue(routeScriptId)) {
                            $ScriptId.val(routeScriptId).trigger('change');
                            routeScriptId = "";
                        }
                    });
                }
            });

            // when script changes, clear fields and get script-specific fields
            $("#ScriptId").on("change", function () {
                let scriptId = $(this).val();
                clearScriptFields();
                if (hasValue(scriptId)) {
                    $.getJSON(`?handler=Script&scriptId=${scriptId}`, (data) => {
                        // load the script fields
                        $('#scriptSummary').val(data.summary);
                        $.each(data.inputParms, function (i, parm) {
                            $('div.parameters').append(`<div class="form-group row">
                                                            <label for="${parm.name}" class="col-md-2 col-form-label">${parm.name}</label>
                                                            <div class="col-md-4">
                                                                <input type="${parm.type}" class="form-control" id="${parm.name}" name="${parm.name}"
                                                                    ${parm.list ? " custom-select" : ""}
                                                                    ${parm.placeholder ? " placeholder='" + parm.placeholder + "'" : ""}
                                                                    ${parm.required ? " required" : ""}
                                                                    ${parm.list ? " list='" + parm.name + "List'" : ""}
                                                                    ${parm.min ? " min='" + parm.min + "'" : ""}
                                                                    ${parm.max ? " max='" + parm.max + "'" : ""}
                                                                    ${parm.step ? " step='" + parm.step + "'" : ""}
                                                                    ${parm.pattern ? " pattern='" + parm.pattern + "'" : ""}>
                                                                    ${parm.list ? "<datalist id='" + parm.name + "List'>" +
                                                                                        "<option value='" + parm.list.join("'></option><option value='") + "'></option>" +
                                                                                    "</datalist>" : ""}
                                                                    ${parm.type == "range" ? "<output for='" + parm.name + "'></output>" : ""}
                                                            </div>
                                                            ${parm.description ? "<textarea class='col-md-6 form-control-plaintext pl-2' readonly style='resize:none;'>" + parm.description + "</textarea>" : ""}
                                                        </div>`);
                        });
                    });
                }
                // clear the log if the selected script changes
                $('#log').DataTable().clear().draw();
            });

        })();

    </script>

}
