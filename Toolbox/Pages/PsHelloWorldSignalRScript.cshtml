@page
@model Toolbox.Pages.PsHelloWorldSignalRScriptModel
@{
}

@section head {
    <!-- DataTables -->
    <link rel="stylesheet" href="~/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
    <link rel="stylesheet" href="~/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
    <link rel="stylesheet" href="~/plugins/datatables-buttons/css/buttons.bootstrap4.min.css">
    <style>
        .terminal {
            display: block; position: relative;
            line-height: initial; overflow-y: auto;
            height: auto; font-family: monospace; font-size: 12px;
            color: #aaa; background-color: #000;
            box-sizing: border-box; padding: 10px;
        }
        #log { table-layout: auto; }
        #log td:nth-of-type(1) { white-space: nowrap }
        #log th { text-align: left; }
        #log th:last-child { width: 100%; }
        #log td { border: 0; padding: .1rem .25rem; }
    </style>
}

<div id="terminal" class="terminal" style="width: 1000px; height: 500px;">
    <table id="log" class="table table-borderless">
        <thead><tr><th>TimeStamp</th><th>Type</th><th>Data</th></tr></thead>
        <tbody></tbody>
    </table>
</div>
<button id="execute" type="button" class="btn btn-primary" onclick="execute();"><i class="fas fa-code"></i> Execute</button>

@section scripts {

    <!-- SignalR -->
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <!-- DataTables  & Plugins -->
    <script src="~/plugins/datatables/jquery.dataTables.min.js"></script>
    <script src="~/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
    <script src="~/plugins/datatables-buttons/js/dataTables.buttons.min.js"></script>
    <script src="~/plugins/datatables-buttons/js/buttons.bootstrap4.min.js"></script>
    <script src="~/plugins/jszip/jszip.min.js"></script>
    <script src="~/plugins/pdfmake/pdfmake.min.js"></script>
    <script src="~/plugins/pdfmake/vfs_fonts.js"></script>
    <script src="~/plugins/datatables-buttons/js/buttons.html5.min.js"></script>
    <script src="~/plugins/datatables-buttons/js/buttons.print.min.js"></script>

    <script>

        $(document).ready(function () {
            $('#log').DataTable({
                buttons: [
                    { extend: 'copy', className: 'btn-sm' },
                    { extend: 'csv', className: 'btn-sm' },
                    { extend: 'excel', className: 'btn-sm' },
                    { extend: 'pdf', className: 'btn-sm' },
                    { extend: 'print', className: 'btn-sm' }
                ],
                paging: false,
                lengthChange: false,
                searching: true,
                ordering: true,
                info: false,
                autoWidth: false,
                responsive: false,
            }).buttons().container().appendTo('#log_wrapper .col-md-6:eq(0)');
        });

        var connection = new signalR.HubConnectionBuilder().withUrl("/streamPowershell").build();

        //Disable send button until connection is established
        $('#execute').prop('disabled', true);

        connection.on("OutputReceived", logRecord => {
            console.log(logRecord)
            $('#log').DataTable().row.add([logRecord.timeStamp, logRecord.type, logRecord.data]).draw(false);
        });

        connection.start().then(function () {
            $('#execute').prop('disabled', false);
        }).catch(err => $('#log').DataTable().row.add(["", "Error", `An error occured: ${err}`]).draw(false));

        // Invoke the "Stream" method, with the command
        function execute() {
            $('#log').DataTable().clear().draw();
            connection.invoke("StreamPowershell", script, {}).catch(function (err) {
                $('#log').DataTable().row.add(["", "Error", `An error occured: ${err}`]).draw(false);
            });
            event.preventDefault();
        }

        var script =
            //"Param($StrParam, $IntParam)" + "\n" +
            "" + "\n" +
            "Write-Output \"Message from inside the running script\"" + "\n" +
            //"Write-Output \"This is the value from the first param: $StrParam\"" + "\n" +
            //"Write-Output \"This is the value from the second param: $IntParam\"" + "\n" +
            "" + "\n" +
            "Write-Output \"Here are the loaded modules in the script:\"" + "\n" +
            "Get-Module" + "\n" +
            "" + "\n" +
            "# write some data to the info/warning streams" + "\n" +
            "" + "\n" +
            "Write-Host \"A message from write-host\"" + "\n" +
            "Write-Information \"A message from write-information\"" + "\n" +
            "" + "\n" +
            "Write-Warning \"A message from write-warning\"" + "\n" +
            "" + "\n" +
            "# write a message to the error stream by throwing a non-terminating error" + "\n" +
            "# note: terminating errors will stop the pipeline." + "\n" +
            "Get-ChildItem -Directory \"folder-doesnt-exist\"" + "\n" +
            "";

    </script>

}